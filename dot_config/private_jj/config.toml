"$schema" = "https://jj-vcs.github.io/jj/latest/config-schema.json"

[user]
name = "Thomas"
email = "substantialimpulse@pm.me"

[ui]
pager = "delta"
default-command = "log"
merge-editor = "meld"
diff-editor = "meld"
editor = ["nvim", "--cmd", "let g:flatten_wait=1"]

[aliases]
# Log graph, only up to master
l = ["log", "-r", "(trunk()..@):: | (trunk()..@)-"]
logdetail = ["log", "-T", "builtin_log_detailed"]
# Diff with meld
diffm = ["diff", "--tool", "meld"]
# Tug bookmark
tug = ["bookmark", "move", "--from", "heads(::@- & bookmarks())", "--to", "@"]
# Retrunk revisions. Typically as `jj retrunk -s ...` -- notably can be used
# with open:
# - jj retrunk -s 'all:roots(open())'
retrunk = ["rebase", "-d", "trunk()"]
# Retrunk the current stack of work.
reheat = ["retrunk", "-s", "all:roots(trunk()..open())"]
# Improve name
blame = ["file", "annotate"]
# Log all open stacks of work
open = ["log", "-r", "open()"]
gf = ["git", "fetch"]
gp = ["git", "push"]

[snapshot]
auto-update-stale = true

[git]
private-commits = 'blacklist()'


[template-aliases]
"format_timestamp(timestamp)" = "timestamp.ago()"
'format_short_id(id)' = 'id.shortest(4)'


[templates]
op_log_node = 'if(current_operation, "@", "◉")'
log_node = '''
label("node",
  coalesce(
    if(!self, label("elided", "~")),
    if(current_working_copy, label("working_copy", "@")),
    if(conflict, label("conflict", "x")),
    if(immutable, label("immutable", "◆")),
    if(description.starts_with("wip: "), label("wip", "!")),
    label("normal", "○")
  )
)
'''
log = '''
  if(root,
    format_root_commit(self),
    label(if(current_working_copy, "working_copy"),
      concat(
        separate(" ",
          format_short_change_id_with_hidden_and_divergent_info(self),
          if(empty, label("empty", "(empty)")),
          if(description,
            description.first_line(),
            label(if(empty, "empty"), description_placeholder),
          ),
          format_short_signature_oneline(author),
          bookmarks,
          tags,
          working_copies,
          if(git_head, label("git_head", "HEAD")),
          if(conflict, label("conflict", "conflict")),
          if(config("ui.show-cryptographic-signatures").as_boolean(),
            format_short_cryptographic_signature(signature)),
        ) ++ "\n",
      ),
    )
  )
'''

[revsets]
# By default, show all my current stacks of work.
# log = 'stack(mine() | @) | trunk() | @'


[revset-aliases]
# Useful on Windows. 
'at' = '@'

'user(x)' = 'author(x) | committer(x)'

# By default, show the repo trunk, the remote bookmarks, and all remote tags. We
# don't want to change these in most cases, but in some repos it's useful.
'immutable_heads()' = 'present(trunk()) | untracked_remote_bookmarks() | tags()'

# Useful to ignore this, in many repos. For repos like `jj` these are
# consistently populated with a bunch of auto-generated commits, so ignoring it
# is often nice.
'gh_pages()' = 'ancestors(remote_bookmarks(exact:"gh-pages"))'

# Private and WIP commits that should never be pushed anywhere. Often part of
# work-in-progress merge stacks.
'wip()' = 'description(glob:"wip:*")'
'private()' = 'description(glob:"private:*")'
'blacklist()' = 'wip() | private()'

# stack(x, n) is the set of mutable commits reachable from 'x', with 'n'
# parents. 'n' is often useful to customize the display and return set for
# certain operations. 'x' can be used to target the set of 'roots' to traverse,
# e.g. @ is the current stack.
'stack()' = 'stack(@)'
'stack(x)' = 'stack(x, 2)'
'stack(x, n)' = 'ancestors(reachable(x, mutable()), n)'


# The current set of "open" works. It is defined as: all stacks that are
# reachable from my working copy, or any other commit I wrote.
# n = 1, meaning that nothing from `trunk()` is included, so all resulting
# commits are mutable by definition.
'open()' = 'stack(mine() | @, 1)'
